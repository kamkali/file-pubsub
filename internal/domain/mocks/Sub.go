// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "pubsub-assignment/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Sub is an autogenerated mock type for the Sub type
type Sub struct {
	mock.Mock
}

// AddTopic provides a mock function with given fields: topic
func (_m *Sub) AddTopic(topic string) {
	_m.Called(topic)
}

// Close provides a mock function with given fields:
func (_m *Sub) Close() {
	_m.Called()
}

// Consume provides a mock function with given fields: ctx, handler
func (_m *Sub) Consume(ctx context.Context, handler func(*domain.Envelope) error) error {
	ret := _m.Called(ctx, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*domain.Envelope) error) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *Sub) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsActive provides a mock function with given fields:
func (_m *Sub) IsActive() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Signal provides a mock function with given fields: ctx, e
func (_m *Sub) Signal(ctx context.Context, e *domain.Envelope) {
	_m.Called(ctx, e)
}

type mockConstructorTestingTNewSub interface {
	mock.TestingT
	Cleanup(func())
}

// NewSub creates a new instance of Sub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSub(t mockConstructorTestingTNewSub) *Sub {
	mock := &Sub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
